<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="10">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<token name="AnimationWeightedBlendFix">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ClientAnimatorThrottling">0</token>
			<string name="CollisionGroups">Default^0^-1</string>
			<Ref name="CurrentCamera">RBX1F3759137BBB4BB8B091F9EB035513A3</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<Vector3 name="GlobalWind">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<float name="Gravity">196.199997</float>
			<token name="HumanoidOnlySetCollisionsOnStateChange">0</token>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeadsAndAccessories">0</token>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<bool name="NeedsPivotMigration">false</bool>
			<token name="PhysicsInertiaAndVolumeFix">0</token>
			<token name="PhysicsSteppingMethod">0</token>
			<Ref name="PrimaryPart">null</Ref>
			<token name="ReplicateInstanceDestroySetting">0</token>
			<token name="Retargeting">0</token>
			<token name="SignalBehavior">0</token>
			<int64 name="SourceAssetId">-1</int64>
			<token name="StreamOutBehavior">0</token>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
			<bool name="TouchesUseCollisionGroups">false</bool>
			<token name="UnionsScaleNonuniformly">0</token>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001dda7</UniqueId>
			<OptionalCoordinateFrame name="WorldPivotData">
				<CFrame>
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CFrame>
			</OptionalCoordinateFrame>
		</Properties>
		<Item class="Camera" referent="RBX1F3759137BBB4BB8B091F9EB035513A3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>77.1729736</X>
					<Y>268.805817</Y>
					<Z>199.000183</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.780868828</R11>
					<R12>0.624695063</R12>
					<R20>0</R20>
					<R21>-0.624695063</R21>
					<R22>0.780868828</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>77.1729736</X>
					<Y>267.556427</Y>
					<Z>197.438446</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f751</UniqueId>
			</Properties>
		</Item>
		<Item class="Part" referent="11">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4284636770</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Baseplate</string>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c2</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>512</X>
					<Y>20</Y>
					<Z>512</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBX384D8FA98D024D92AA727E468A7CE6AF">
			<Properties>
				<token name="AcquisitionMethod">0</token>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c3</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0500000007</R>
					<G>0.330000013</G>
					<B>0.360000014</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
	</Item>
	<Item class="SoundService" referent="6">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f704</UniqueId>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBX566E29133AE74978B7696E5DD6F9D037">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f710</UniqueId>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBX963375E831CB48B79CC8E6D618AC26EA">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f711</UniqueId>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBXB82FD1DF4300454B86753D8DD479F8B5">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f716</UniqueId>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBXBAE23680EDFD4915BE239891434A9E54">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f717</UniqueId>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX297AA1F2419F42D199FF96686950973C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">12</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">0</int>
			<float name="RespawnTime">5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f719</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX3893D1A710AB406F8F65D8BAF816C88F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f71d</UniqueId>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBX0B37926808CC4E9DA459E7CFB26F8F9C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f71f</UniqueId>
		</Properties>
	</Item>
	<Item class="MaterialService" referent="RBXC16F517D0693415CAF5F80579FFB136F">
		<Properties>
			<string name="AsphaltName">Asphalt</string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="BasaltName">Basalt</string>
			<string name="BrickName">Brick</string>
			<string name="CobblestoneName">Cobblestone</string>
			<string name="ConcreteName">Concrete</string>
			<string name="CorrodedMetalName">CorrodedMetal</string>
			<string name="CrackedLavaName">CrackedLava</string>
			<string name="DiamondPlateName">DiamondPlate</string>
			<string name="FabricName">Fabric</string>
			<string name="FoilName">Foil</string>
			<string name="GlacierName">Glacier</string>
			<string name="GraniteName">Granite</string>
			<string name="GrassName">Grass</string>
			<string name="GroundName">Ground</string>
			<string name="IceName">Ice</string>
			<string name="LeafyGrassName">LeafyGrass</string>
			<string name="LimestoneName">Limestone</string>
			<string name="MarbleName">Marble</string>
			<string name="MetalName">Metal</string>
			<string name="MudName">Mud</string>
			<string name="Name">MaterialService</string>
			<string name="PavementName">Pavement</string>
			<string name="PebbleName">Pebble</string>
			<string name="PlasticName">Plastic</string>
			<string name="RockName">Rock</string>
			<string name="SaltName">Salt</string>
			<string name="SandName">Sand</string>
			<string name="SandstoneName">Sandstone</string>
			<string name="SlateName">Slate</string>
			<string name="SmoothPlasticName">SmoothPlastic</string>
			<string name="SnowName">Snow</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f720</UniqueId>
			<bool name="Use2022MaterialsXml">false</bool>
			<string name="WoodName">Wood</string>
			<string name="WoodPlanksName">WoodPlanks</string>
		</Properties>
	</Item>
	<Item class="TextChatService" referent="RBX513A236F847044DEBD191EB28A7A7ED9">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ChatVersion">0</token>
			<bool name="CreateDefaultCommands">true</bool>
			<bool name="CreateDefaultTextChannels">true</bool>
			<string name="Name">TextChatService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f721</UniqueId>
		</Properties>
		<Item class="ChatWindowConfiguration" referent="RBXF2B220E3F12E40F6811163965F84B396">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<string name="Name">ChatWindowConfiguration</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c5</UniqueId>
			</Properties>
		</Item>
		<Item class="ChatInputBarConfiguration" referent="RBX79B26481CD3348E388B3D32CC1367245">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<string name="Name">ChatInputBarConfiguration</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<Ref name="TargetTextChannel">null</Ref>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c6</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="PermissionsService" referent="RBX9F4446E1C17541F79797E8F8C3B5F326">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f725</UniqueId>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBX1C151EAE2B834D92A71B104A00E58869">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CustomPoliciesEnabled">false</bool>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<BinaryString name="SerializedEmulatedPolicyInfo"></BinaryString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f727</UniqueId>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBXACE9AAEB07FF4A1FAAF5086D14FA3199">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">0</int64>
			<int64 name="SrcUniverseId">0</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f72a</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="7">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">400</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<token name="LoadCharacterLayeredClothing">0</token>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f72b</UniqueId>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c0</UniqueId>
			</Properties>
			<Item class="LocalScript" referent="9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Client</string>
					<token name="RunContext">0</token>
					<string name="ScriptGuid">{62D7130F-9DE8-47BD-970D-9D9B1C295230}</string>
					<ProtectedString name="Source">print(&quot;Hello world, from client!&quot;)</ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c1</UniqueId>
				</Properties>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX440D6FC61E0F463F9063166958BCD34C">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7c4</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBXE73CE53D4E234EF1960EBA1255A195CC">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f72c</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX4BFB461A2BE24566BF70C8A9F692C338">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f72d</UniqueId>
			<token name="VirtualCursorMode">0</token>
		</Properties>
	</Item>
	<Item class="LocalizationService" referent="RBX1B378802FF904F77AAF5296DA4118798">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f72f</UniqueId>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX14E152D787A7470186385E1ADE835BEC">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f733</UniqueId>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX31A0DD898F42499E9C57D3B569D5238C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f735</UniqueId>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBXC4235D7A1FA64DA5B9D47DC204BC576B">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f736</UniqueId>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBXC246CB72883540528B1BF94560FBEC39">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f738</UniqueId>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBXB0586B72D6B746F09EFB28FED86ADFA8">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f73a</UniqueId>
		</Properties>
		<Item class="StringValue" referent="RBX339F2E1947664D51ABBDAD6917F110AC">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InsertionHash</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50002d488</UniqueId>
				<string name="Value">{5B2109CB-D513-435E-B0FE-12E12BB6B005}</string>
			</Properties>
		</Item>
	</Item>
	<Item class="GamePassService" referent="RBXD395CEC7007B401B9F8E8C1A4CD8EE9A">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f73b</UniqueId>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX6DCD66B041DC4639A9D1065916A6E07B">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f73c</UniqueId>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX86C3590CB66B486DBA8402C220381882">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f73d</UniqueId>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBXBC81C843A06B49AAA323317EF7871E16">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f747</UniqueId>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBXB77BCCB444BC4DD6BE862B7B98A5C219">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f749</UniqueId>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX0E6C6B705A4648408BEEFCD5B2FDCC6F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f74b</UniqueId>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBX7A01F783AAC74FA093DB627ED55133FD">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f74c</UniqueId>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX91143805040446B6B8C7030A5A4CEBF4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f74d</UniqueId>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBX80A961F534CC4A4FB415BD9C3B1D6A76">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f750</UniqueId>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBXB216C16525C34129BF47AB3D21CA80D6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f753</UniqueId>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f755</UniqueId>
		</Properties>
		<Item class="Script" referent="5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Server</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{0224FAB7-AAD2-48F5-BD9B-40CE1826AD06}</string>
				<ProtectedString name="Source"><![CDATA[
-- Services --

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables --

local Engine = require(ReplicatedStorage:FindFirstChild("Common"):FindFirstChild("Engine"))

Engine.Start()

local Signal = Engine.Require("Signal")

]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7be</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX52E5239718B34756ACDEFE0D06AD3E2F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f756</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedStorage" referent="1">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f757</UniqueId>
		</Properties>
		<Item class="Folder" referent="2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Common</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7bc</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Engine</string>
					<string name="ScriptGuid">{39E5E36A-73C1-4558-B83F-99F2C8AE54E4}</string>
					<ProtectedString name="Source"><![CDATA[
--@noahrepublic

local Engine = {
	Utilities = script.Parent.Utilities,
	StartUp = script.Parent.StartUp:GetChildren(),
	Services = script.Parent.Services:GetChildren(),
	LoadedServices = {}
}
Engine.__index = Engine

local Utilities = script.Parent.Utilities

-- Functions --

function Engine.Start()
	for _, v in pairs(Engine.StartUp) do
		local success, msg = pcall(function()
			require(v)
		end)
		if not success then
			warn("Error loading " .. v.Name .. ": " .. msg)
		else
			print("Loaded " .. v.Name)
		end
	end

	for _, v in pairs(Engine.Services) do
		local service = require(v)
		Engine.LoadedServices[v] = service
	end
end

function Engine.Require(name)
	if Utilities[name] then
		return require(Utilities[name])
	elseif Engine.StartUp[name] then
		return require(Engine.StartUp[name])
	else
		warn("Engine.Require: " .. name .. " not found.")
	end
end

return Engine]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f7bd</UniqueId>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX32DB5B0883414149A4040CEE61B80E55">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Utilities</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">46af552ad96b45b002c395e50002d4cb</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX0927DDC37D134AA4872E058B01288299">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Soap</string>
						<string name="ScriptGuid">{79EEF083-2A86-4AEB-A917-20CC7E8825E6}</string>
						<ProtectedString name="Source"><![CDATA[
-- @noahrepublic
-- @version 1.0
-- @date 2022-06-21

--[[
    TODO: 
    - Add support to link to objects
]]

local Soap = {}
Soap.__index = Soap

-- Functions --

function Soap.new() -- init
    return setmetatable({
        _Tasks = {
            _High = {},
            _Default = {}
        }
    }, Soap)
end

function Soap:Add(task, priority)
    local tasks = self._Tasks
    if priority == "High" then priority = tasks._High else priority = tasks._Default end
    -- temporary, later i will use smart insert once i make it
    table.insert(priority, task)
    if priority == tasks._High then
        Soap:Add(task.spawn(self:Scrub(true)))
    end
    return task
end

function Soap:Scrub(r)
    local tasks = self._Tasks._Default
    if r then
        tasks = self._Tasks._High
    end
    
    for index, step in pairs(tasks) do
        if step:IsA("RBXScriptConnection") then
            step:Disconnect()
        elseif step:IsA("Tween") then
            step:Stop()
        elseif type(step) == "function" then
            step()
        elseif typeof(step) == "Instance" then
            step:Destroy()
        elseif type(step) == "thread" then
            task.cancel(step)
        elseif step.Destroy then
            step:Destroy() -- custom modules can be used
        elseif type(step) == "table" then
            for i, _ in pairs(step) do
                step[i] = nil
            end
        end
        tasks[index] = nil
    end
end

return Soap]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">46af552ad96b45b002c395e50002d4d0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3766FE4179C048DE9DE1903A40B67C24">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">OptiTables</string>
						<string name="ScriptGuid">{AC5CD21D-0099-475D-8855-FD738495B1F2}</string>
						<ProtectedString name="Source"><![CDATA[
local OptimizedTables = {}
OptimizedTables.__index = OptimizedTables

-- Functions --

-- Private: 

local function deepFreeze(tbl)
    table.freeze(tbl)
    for _, v in pairs(tbl) do
        if type(v) == "table" and not table.isfrozen(tbl) then
            deepFreeze(v)
        end
    end
end

-- Public:

function OptimizedTables.new(t, size :number) -- init
    if size == nil then
        t = t or {}
    else
        t = t or table.create(size)
    end
    return setmetatable({
        _tbl = t,
        _tblInfo = {
            _size = #t
        }
    }, OptimizedTables)
end

function OptimizedTables:__newindex(index, value)
    if self[index] ~= nil then
        error(("'%s' is reserved"):format(tostring(index)), 2)
    end

    local oldVal = self._tbl[index]
    if oldVal == value then
        return
    end
    self._tbl[index] = value
    self._tblInfo._size = self._tblInfo._size + 1
end

function OptimizedTables:__index(index)
    if self._tbl[index] ~= nil then
        return self._tbl[index]
    elseif OptimizedTables[index] ~= nil then
        return OptimizedTables[index]
    else
        return nil
    end
end

function OptimizedTables:Insert(value, index)
    self._tblInfo._size = self._tblInfo._size + 1
    if type(self._tbl[index or self._tblInfo._size]) == "table" then
        table.insert(self._tbl[index or self._tblInfo._size], value)
    else
        self._tbl[index or self._tblInfo._size] = value
    end
end

function OptimizedTables:Remove(index) -- WARNING: THIS FUNCTION DOES NOT KEEP ORDER, DEFAULT TO USING ARRAY[INDEX] = nil
    self._tbl[index] = self._tbl[self._tblInfo._size]
    self._tbl[self._tblInfo._size] = nil
    self._tblInfo._size = self._tblInfo._size - 1
end

function OptimizedTables:Clear()
    for i = 1, self._tblInfo._size do
        self._tbl[i] = nil
    end
    self._tblInfo._size = 0
end

function OptimizedTables:DeepClear() -- WARNING: REMOVES ALLOCATED MEMORY AND MAYBE MORE EXPENSIVE, USE ON TABLES YOU ARE NOT RESUSING
    self._tbl = {}
    self._tblInfo._size = 0
end

function OptimizedTables:Len()
    return self._tblInfo._size
end

function OptimizedTables:Concat(sep :string, i :number, j :number)
    return table.concat(self._tbl, sep, i, j) -- this already is pretty optimized, just made the function for simplicity
end

function OptimizedTables:BinarySearch(value) -- only works in some use cases
    local low = 1
    local high = self._tblInfo._size

    while low <= high do
        local mid = low + math.floor((high - low) / 2)
        local midVal = self._tbl[mid]
        if midVal == value then
            return mid
        end
        if value < midVal then
			high = mid - 1
		elseif midVal < value then
			low = mid + 1
		else
			while mid >= 1 and not (self._tbl[mid] < value or value < self._tbl[mid]) do
				mid -= 1
			end
			return mid + 1
		end

    end
end

function OptimizedTables:Find(value, init :number)
    return table.find(self._tbl, value, init or 1)
end

function OptimizedTables:foreach(func) -- come back to these noah
    for i = 1, self._tblInfo._size do
        func(i, self._tbl[i])
    end
end

function OptimizedTables:foreachi(func) -- come back to these noah
    for i = 1, self._tblInfo._size do
        func(i)
    end
end

function OptimizedTables:foreachv(func) -- come back to these noah
    for i = 1, self._tblInfo._size do
        func(self._tbl[i])
    end
end

function OptimizedTables:Freeze()
    table.freeze(self._tbl)
end

function OptimizedTables:DeepFreeze()
    deepFreeze(self._tbl)
    return self
end

function OptimizedTables:DeepCopy()
    local newTbl = {}
    for i = 1, self._tblInfo._size do
        newTbl[i] = self._tbl[i]
    end
    return setmetatable({
        _tbl = newTbl,
        _tblInfo = {
            _size = self._tblInfo._size
        }
    }, OptimizedTables)
end

function OptimizedTables:Destroy()
    self:DeepClear()
    self._tbl = nil
    self._tblInfo = nil
    self = nil
end

return OptimizedTables]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">46af552ad96b45b002c395e50002ef02</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE04E4E47F5F449BDA41A84634F752471">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Data</string>
						<string name="ScriptGuid">{0FACEAA7-A0B3-44FC-99AC-A16FCE3F866F}</string>
						<ProtectedString name="Source"><![CDATA[
-- @noahrepublic
-- @version 1.01
-- @date 2022-06-21

--[[ Data Store Handler
    TODO:
    - Add mock data stores for offline
    - Add global data actually do something
]]

-- Services --

local DataStoreService = game:GetService("DataStoreService")

-- @Quenty Signal --

local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local ENABLE_TRACEBACK = false

local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"

--[=[
	Returns whether a class is a signal
	@param value any
	@return boolean
]=]
do
	function Signal.isSignal(value)
		return type(value) == "table"
			and getmetatable(value) == Signal
	end

    --[=[
        Constructs a new signal.
        @return Signal<T>
    ]=]
	function Signal.new()
		local self = setmetatable({}, Signal)

		self._bindableEvent = Instance.new("BindableEvent")
		self._argMap = {}
		self._source = ENABLE_TRACEBACK and debug.traceback() or ""

		-- Events in Roblox execute in reverse order as they are stored in a linked list and
		-- new connections are added at the head. This event will be at the tail of the list to
		-- clean up memory.
		self._bindableEvent.Event:Connect(function(key)
			self._argMap[key] = nil

			-- We've been destroyed here and there's nothing left in flight.
			-- Let's remove the argmap too.
			-- This code may be slower than leaving this table allocated.
			if (not self._bindableEvent) and (not next(self._argMap)) then
				self._argMap = nil
			end
		end)

		return self
	end

    --[=[
        Fire the event with the given arguments. All handlers will be invoked. Handlers follow
        @param ... T -- Variable arguments to pass to handler
    ]=]
	function Signal:Fire(...)
		if not self._bindableEvent then
			warn(("Signal is already destroyed. %s"):format(self._source))
			return
		end

		local args = table.pack(...)

		-- TODO: Replace with a less memory/computationally expensive key generation scheme
		local key = HttpService:GenerateGUID(false)
		self._argMap[key] = args

		-- Queues each handler onto the queue.
		self._bindableEvent:Fire(key)
	end

    --[=[
        Connect a new handler to the event. Returns a connection object that can be disconnected.
        @param handler (... T) -> () -- Function handler called when `:Fire(...)` is called
        @return RBXScriptConnection
    ]=]
	function Signal:Connect(handler)
		if not (type(handler) == "function") then
			error(("connect(%s)"):format(typeof(handler)), 2)
		end

		return self._bindableEvent.Event:Connect(function(key)
			-- note we could queue multiple events here, but we'll do this just as Roblox events expect
			-- to behave.

			local args = self._argMap[key]
			if args then
				handler(table.unpack(args, 1, args.n))
			else
				error("Missing arg data, probably due to reentrance.")
			end
		end)
	end

    --[=[
        Wait for fire to be called, and return the arguments it was given.
        @yields
        @return T
    ]=]
	function Signal:Wait()
		local key = self._bindableEvent.Event:Wait()
		local args = self._argMap[key]
		if args then
			return table.unpack(args, 1, args.n)
		else
			error("Missing arg data, probably due to reentrance.")
			return nil
		end
	end

    --[=[
        Disconnects all connected events to the signal. Voids the signal as unusable.
        Sets the metatable to nil.
    ]=]
	function Signal:Destroy()
		if self._bindableEvent then
			-- This should disconnect all events, but in-flight events should still be
			-- executed.

			self._bindableEvent:Destroy()
			self._bindableEvent = nil
		end

		-- Do not remove the argmap. It will be cleaned up by the cleanup connection.

		setmetatable(self, nil)
	end

end

-- Variables --

local DataService = {
	_LoadedData = {
        --[[
            [player] = {
                "current_server" = jobId or nil,
                "data" = {}
            }
        ]]
	},
	_autoSaveList = {}, -- data
	_serviceLock = false,
	_data_store_name = "",
	_data_store_scope = nil, -- [string]
	_data_store_look = "", -- [string] -- _data_store_name .. "\0" .. (_data_store_scope or "")

	_mock_datastores = {}, -- "copy datastore", used for offline purposes / backups / api unavaiable
	_using_mock_datastores = false,

	_forceLoadReady = Signal.new(),
	_bindCloseFinished = Signal.new(),
	_IssueSignal = Signal.new(),
	_CriticalStateSignal = Signal.new(),
	_releaseData = Signal.new(),

	_global_store = nil,
	_data_template = {
		MetaData = {
			ActiveSession = {
				place_id = nil,
				job_id = nil
			},
			MetaTags = {},
			last_update = 0, -- os.time()
			Forceload = false
		},
		Data = {},
		Global = {
            --[[
                [key] = {
                    data = {}, 
                    time_posted = os.time()
                }
            ]]
		}
	}

}
DataService.__index = DataService

local Data = {}
Data.__index = Data

local SETTINGS = {
	AutoSaveData = 0.5 * 60,
	SessionDead = 15 * 60,
	Max_Usage = 0.25, -- %
	IssueState_T = 2 * 60,
	IssueQueue_Max = 5,
	Issue_Check_Interval = 0.5 * 60,
}

-- 

local lastAutoSave = os.clock()

local jobId = game.JobId
local placeId = game.PlaceId

local IsStudio = RunService:IsStudio()

local dataError = false
local ErrorQueue = {}

-- Functions --

if IsStudio then
	task.spawn(function()
		-- Credit to @loleris for this function
		local status, message = pcall(function()
			DataStoreService:GetDataStore("___PS"):SetAsync("___PS", os.time()) 
		end)

		local no_internet = status == false and string.find(message, "ConnectFail", 1, true) ~= nil
		if no_internet then
			warn("DATA: No internet connection. Data will not be saved.")
		end
		if status == false and
			(string.find(message, "403", 1, true) ~= nil or -- Cannot write to DataStore from studio if API access is not enabled
				string.find(message, "must publish", 1, true) ~= nil or -- Game must be published to access live keys
				no_internet == true) then -- No internet access

			DataService._using_mock_datastores = true
			print("API services unavailable - data will not be saved")
		else
			print("API services available - data will be saved")
		end
	end)
end

-- Private:

local function DeepCopyTable(t)
	local copy = {}
	for key, value in pairs(t) do
		if type(value) == "table" then
			copy[key] = DeepCopyTable(value)
		else
			copy[key] = value
		end
	end
	return copy
end

local function Rebuild(target, template)
	for k, v in pairs(template) do
		if type(k) == "string" then
			if target[k] == nil then
				if type(v) == "table" then
					target[k] = DeepCopyTable(v)
				else
					target[k] = v
				end
			elseif type(target[k]) == "table" and type(v) == "table" then
				Rebuild(target[k], v)
			end
		end
	end
end

local function len(t)
	local n = 0

	for _ in pairs(t) do
		n = n + 1
	end
	return n
end

local function validateSession(sessionData, void)
	if sessionData.place_id == placeId and sessionData.job_id == jobId then
		return true
	elseif sessionData.place_id == nil and sessionData.job_id == nil then
		return true -- no session has it, it is free to use
	else
		return false
	end
end

local function GetBudget()
	return DataStoreService:GetRequestBudgetForRequestType(Enum.DataStoreRequestType.UpdateAsync)
end

local function NewError(key)
	ErrorQueue[key] = true
	task.delay(SETTINGS.IssueState_T, function()
		ErrorQueue[key] = nil
	end)
	if #ErrorQueue > SETTINGS.IssueQueue_Max then
	DataService._CriticalStateSignal:Fire(true)
	end
end

local function UpdateData(new_data, key)

	local sessionOwned = false
	local corrupted = false

	if validateSession(new_data) then
		if (os.time() - new_data.MetaData.last_update) < 15 then
			print("Already saved in the past 15 seconds, skipping")
			return
		end
		sessionOwned = true
		local success, err
		if DataService._serviceLock then
			new_data.MetaData.sessionData.place_id = nil
			new_data.MetaData.sessionData.job_id = nil
		end
		success, err = pcall(DataService._global_store.UpdateAsync, DataService._global_store, key, function()
			new_data.MetaData.last_update = os.time()
			return new_data
		end)
		if new_data.MetaData.Forceload and success then -- sorry for leaving you on read
			DataService._forceLoadReady:Fire(new_data)
		end
		if not success then
			print("Data did not save... " .. err) -- add RequestIssue() in future
			
			NewError(key)
		else
			print("DATA IS SAVED!!!!")
			DataService._LoadedData[key] = new_data
			DataService._LoadedData[key].MetaData.Key = key
		end
	else
		warn("This data does not belong to this session.")
	end
end

local function SplitQueue(queue)
	local requestAmount = len(queue)
	local budget = GetBudget()
	local split = math.floor(budget / (requestAmount))
	if requestAmount / budget > SETTINGS.Max_Usage then
		split = math.floor(budget / (requestAmount / 2))
	end

	local split_queue = {}
	local current = 1


	for i, v in pairs(queue) do
		if split_queue[current] == nil then
			split_queue[current] = {}
		end
		table.insert(split_queue[current], queue[i])
		if len(split_queue[current]) >= split then
			current = current + 1
		end
	end

	return split_queue
end

local function StartQueue()
	local pending_uploads = DataService._autoSaveList
	local splits = 1 -- table = {{}, {}, ...}
	if not DataService._serviceLock then
		pending_uploads = SplitQueue(pending_uploads)
		splits = #pending_uploads
	else
		pending_uploads = {pending_uploads}
	end

	for i = 1, splits do
		for k, v in pairs(pending_uploads[i]) do
			local data = v
			local key = data.MetaData.Key
			if key then
				local response = UpdateData(data, key)
				if response and CriticalState then
					DataService._CriticalStateSignal:Fire(false)
					CriticalState = false
				end
			end
		end
	end


	print("Queue saved!")
	lastAutoSave = os.clock()
	if DataService._serviceLock then
		DataService._bindCloseFinished:Fire()
	end

	task.delay(SETTINGS.AutoSaveData, StartQueue)
end


local function BindToClose()
	if not IsStudio then -- no point in waiting, using mock datastores
		DataService._serviceLock = true
		task.spawn(StartQueue)
		print("Starting save sequence...")
		DataService._bindCloseFinished:Wait()
		print("Save sequence finished! Shutting down...")
	end
end


-- Public:

function DataService:LoadDataStore(datastore_name, template, scope)
	local err, success = pcall(function() -- temporary, until critical state is finished
		if scope then
			DataService._global_store = DataStoreService:GetDataStore(datastore_name, scope)
		else
			DataService._global_store = DataStoreService:GetDataStore(datastore_name)
		end
	end)

	if not template then error("No data template was provided.") return end -- TODO: Add feature to continue
	DataService._data_template.Data = DeepCopyTable(template)

	if not DataService._global_store then
		error("DataStore not found: " .. datastore_name)
	end
	DataService._data_store_name = datastore_name
	DataService._data_store_scope = scope
	DataService._data_store_look = datastore_name .. "\0" .. (scope or "")
end

function DataService:LoadData(key, method, rebuild) -- method = "forceload", "default"
	if not IsStudio and not DataService._using_mock_datastores then
		rebuild = rebuild or true
		method = method or "default"
		local current_data = DataService._global_store:GetAsync(key) -- FUTURE ME: ADD SAFETY, pcall, checks, etc.

		if current_data == nil then
			current_data = DeepCopyTable(DataService._data_template)
			current_data.MetaData.last_update = os.time()
			current_data.MetaData.Forceload = false
			print("Data not found, creating new data.")
		else
			print("Data found, loading.")
		end
		if rebuild then
			Rebuild(current_data, DataService._data_template)
		end
		if validateSession(current_data) then
			current_data.MetaData.ActiveSession.place_id = placeId
			current_data.MetaData.ActiveSession.job_id = jobId
			DataService._LoadedData[key] = current_data
			DataService._LoadedData[key].MetaData.Key = key

			DataService._autoSaveList[key] = current_data -- do i reference the profile or the data?
			DataService._autoSaveList[key].MetaData.Key = key 
		else
			if method == "forceload" then
				current_data.MetaData.Forceload = true
				repeat
					task.wait()
				until current_data.MetaData.ActiveSession.place_id == nil and current_data.MetaData.ActiveSession.job_id == nil
				current_data.MetaData.ActiveSession.place_id = placeId
				current_data.MetaData.ActiveSession.job_id = jobId
				current_data.MetaData.Forceload = false
				DataService._LoadedData[key] = current_data
				DataService._LoadedData[key].MetaData.Key = key
				DataService._autoSaveList[key] = current_data
				DataService._autoSaveList[key].MetaData.Key = key
			else
				print("Server does not have access to this data. READ ONLY")
			end
		end
		return setmetatable(DataService._LoadedData[key], Data)
    else
        print("Offline Mode, switching to mock datastores")
        local current_data = DeepCopyTable(DataService._data_template)
		current_data.MetaData.last_update = os.time()
		current_data.MetaData.Forceload = false

        DataService._mock_datastores[key] = current_data
        DataService._mock_datastores[key].MetaData.Key = key

        return setmetatable(DataService._mock_datastores[key], Data)
	end

end

function Data:Release()
	self.MetaData.Forceload = false
	self.MetaData.ActiveSession.place_id = nil
	self.MetaData.ActiveSession.job_id = nil
	UpdateData(self, self.MetaData.Key)
	DataService._releaseData:Fire(self.MetaData.Key)
	DataService._autoSaveList[self.MetaData.Key] = nil
	DataService._LoadedData[self.MetaData.Key] = nil
end

function Data:ListenToRelease(callback) -- [function]
	DataService._releaseData:Connect(function(key)
		if self.MetaData.Key == key then
			callback()
		end
	end)
end

function Data:SetGlobal(name, data :table)
    if not self.MetaData.Global then
        self.MetaData.Global = {}
    end
    self.MetaData.Global[name] = {
        Data = data,
        Time_posted = os.time()
    }
    return self.MetaData.Global[name]
end

function Data:GetGlobal(name)
    return self.MetaData.Global[name]
end

function Data:RemoveGlobal(name)
	self.MetaData.Global[name] = nil
end
    

DataService._forceLoadReady:Connect(function(data)
	print("Forceload ready!")
	data.MetaData.Forceload = false
	data:Release()
end)

DataService._CriticalStateSignal:Connect(function(state)
    dataError = state
    DataService._using_mock_datastores = state -- but we continue the queue just incase
end)


game:BindToClose(BindToClose)

if not IsStudio and not DataService._using_mock_datastores then
    task.delay(SETTINGS.AutoSaveData, StartQueue)
end


return DataService]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">695dd0ad809f8f9402e3456b0002e9df</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9D17DC74FA234EBC897C4835EF8F2075">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal</string>
						<string name="ScriptGuid">{3D8AEC71-288E-47D9-8EAD-D1AB54667DB5}</string>
						<ProtectedString name="Source"><![CDATA[
--@noahrepublic
--@date 07/15/22
--@version 1.0


local Signal = {}
Signal.__index = Signal

local Connection = {}
Connection.__index = Connection

-- Connection Functions --
-- Public:

--[[ Connection.new()
    Creates a new connection object.
    @returns Connection
]]

function Connection.new(signal, callback)
	return setmetatable({
		_signal_object = signal,
        _signal = signal._signal,
        _listener = callback,
        _connection = signal._signal.Event:Connect(callback),

        Connected = true
    }, Connection)
end

--[[ Connection:Disconnect()
    Disconnects the connection from the parent signal object.
    Returns:
        Connection
]]

function Connection:Disconnect()
	print(self.Connected)
    assert(self.Connected, "Connection is not connected")
    self.Connected = false
	self._connection:Disconnect()
	print(self)
    self._signal_object._listeners[self._listener] = nil
    return self
end

Connection.Destroy = Connection.Disconnect -- alias

--[[ Connection:Wait()
    Waits for the connection to be fired.
    Returns: 
        The return value of the callback.    
]]

function Connection:Wait()
    assert(self.Connected, "Connection is not connected")
    return self._connection.Event:Wait()
end

-- Signal Functions --
-- Public:

function Signal.new()
    return setmetatable({
        _listeners = {},
        _signal = Instance.new("BindableEvent")
    }, Signal)
end

--[[ Signal:Connect()
    Connects a listener to the signal.
    Params:
        listener: The function to connect.
    Returns:
        The listener's connection.
]]

function Signal:Connect(callback)
    assert(type(callback) == "function", "Callback must be a function.")
    local connection = Connection.new(self, callback)
    self._listeners[callback] = connection
    return connection
end

--[[ Signal:DisconnectListeners()
    Disconnects all listeners from the signal.
]]

function Signal:DisconnectListeners()
    for _, listener in pairs(self._listeners) do
        listener:Disconnect()
        listener = nil
    end
end

--[[ Signal:Fire()
    Fires the signal.
    Params:
        ...: The arguments to pass to the listeners.
]]

function Signal:Fire(...)
    self._signal:Fire(...)
end

--[[ Signal:ShortConnect() 
    Temporary connects a listener to the signal until the next fire.
    Params:
        listener: The function to connect.
    Returns:
        The listener's connection.
]]

function Signal:ShortConnect(callback)
    assert(type(callback) == "function", "Callback must be a function.")
    local connection = Connection.new(self, function() end)
    local new_callback = function(...)
        callback(...)
        connection._connection:Disconnect()
        connection._signal_object._listeners[callback] = nil
        connection.Connected = false
    end
    self._listeners[callback] = connection
    connection._connection = self._signal.Event:Connect(new_callback)
    return connection
end

return Signal]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">695dd0ad809f8f9402e3456b0002e9e1</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX11AD92DE71AF465885820A35589CB9E7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">StartUp</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">46af552ad96b45b002c395e50002d4cc</UniqueId>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBXBD66130F2F3A4AFF96B0A689B4636EB8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Services</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">46af552ad96b45b002c395e50002d4cd</UniqueId>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBXB5F1C71D614641A0A6A0F3FA2C10C843">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f75e</UniqueId>
		</Properties>
	</Item>
	<Item class="ProcessInstancePhysicsService" referent="RBX3CFDA295B99D4EC2952764AB5E9E7B28">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ProcessInstancePhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f75f</UniqueId>
		</Properties>
	</Item>
	<Item class="Lighting" referent="0">
		<Properties>
			<Color3 name="Ambient">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">2</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.75</R>
				<G>0.75</G>
				<B>0.75</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">true</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">1</token>
			<string name="TimeOfDay">14:00:00</string>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f78b</UniqueId>
		</Properties>
	</Item>
	<Item class="LodDataService" referent="RBX4EB8ABF0C8094EEF9007FECD6BE3B6E7">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50001f78e</UniqueId>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBX3139260F7F5341A488D063284B67C9B3">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50002ad9f</UniqueId>
		</Properties>
	</Item>
	<Item class="Teams" referent="RBXAFD33F7FEB4A43908FBDD480F37FE851">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teams</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50002adc5</UniqueId>
		</Properties>
	</Item>
	<Item class="VirtualInputManager" referent="RBXFFD5F11CBDEE47AEA6E91E77A8E8CF0C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VirtualInputManager</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50002ade3</UniqueId>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBXFF1FC91E645B43C69292E95EB54B8BC8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50002b022</UniqueId>
		</Properties>
	</Item>
	<Item class="DataStoreService" referent="RBX7231D016242D42C09F65AD5C4FA9DC17">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutomaticRetry">true</bool>
			<bool name="LegacyNamingScheme">false</bool>
			<string name="Name">DataStoreService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">46af552ad96b45b002c395e50002cdc2</UniqueId>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>